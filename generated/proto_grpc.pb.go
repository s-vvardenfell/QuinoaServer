// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package generated

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RedisCacheServiceClient is the client API for RedisCacheService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RedisCacheServiceClient interface {
	Get(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Value, error)
	Set(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Ok, error)
}

type redisCacheServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRedisCacheServiceClient(cc grpc.ClientConnInterface) RedisCacheServiceClient {
	return &redisCacheServiceClient{cc}
}

func (c *redisCacheServiceClient) Get(ctx context.Context, in *Key, opts ...grpc.CallOption) (*Value, error) {
	out := new(Value)
	err := c.cc.Invoke(ctx, "/generated.RedisCacheService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redisCacheServiceClient) Set(ctx context.Context, in *Input, opts ...grpc.CallOption) (*Ok, error) {
	out := new(Ok)
	err := c.cc.Invoke(ctx, "/generated.RedisCacheService/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RedisCacheServiceServer is the server API for RedisCacheService service.
// All implementations must embed UnimplementedRedisCacheServiceServer
// for forward compatibility
type RedisCacheServiceServer interface {
	Get(context.Context, *Key) (*Value, error)
	Set(context.Context, *Input) (*Ok, error)
	mustEmbedUnimplementedRedisCacheServiceServer()
}

// UnimplementedRedisCacheServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRedisCacheServiceServer struct {
}

func (UnimplementedRedisCacheServiceServer) Get(context.Context, *Key) (*Value, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedRedisCacheServiceServer) Set(context.Context, *Input) (*Ok, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedRedisCacheServiceServer) mustEmbedUnimplementedRedisCacheServiceServer() {}

// UnsafeRedisCacheServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RedisCacheServiceServer will
// result in compilation errors.
type UnsafeRedisCacheServiceServer interface {
	mustEmbedUnimplementedRedisCacheServiceServer()
}

func RegisterRedisCacheServiceServer(s grpc.ServiceRegistrar, srv RedisCacheServiceServer) {
	s.RegisterService(&RedisCacheService_ServiceDesc, srv)
}

func _RedisCacheService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisCacheServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generated.RedisCacheService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisCacheServiceServer).Get(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedisCacheService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Input)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedisCacheServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generated.RedisCacheService/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedisCacheServiceServer).Set(ctx, req.(*Input))
	}
	return interceptor(ctx, in, info, handler)
}

// RedisCacheService_ServiceDesc is the grpc.ServiceDesc for RedisCacheService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RedisCacheService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "generated.RedisCacheService",
	HandlerType: (*RedisCacheServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _RedisCacheService_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _RedisCacheService_Set_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/proto.proto",
}

// MainServiceClient is the client API for MainService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MainServiceClient interface {
	GetParsedData(ctx context.Context, in *Conditions, opts ...grpc.CallOption) (*ParsedResults, error)
}

type mainServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMainServiceClient(cc grpc.ClientConnInterface) MainServiceClient {
	return &mainServiceClient{cc}
}

func (c *mainServiceClient) GetParsedData(ctx context.Context, in *Conditions, opts ...grpc.CallOption) (*ParsedResults, error) {
	out := new(ParsedResults)
	err := c.cc.Invoke(ctx, "/generated.MainService/GetParsedData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MainServiceServer is the server API for MainService service.
// All implementations must embed UnimplementedMainServiceServer
// for forward compatibility
type MainServiceServer interface {
	GetParsedData(context.Context, *Conditions) (*ParsedResults, error)
	mustEmbedUnimplementedMainServiceServer()
}

// UnimplementedMainServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMainServiceServer struct {
}

func (UnimplementedMainServiceServer) GetParsedData(context.Context, *Conditions) (*ParsedResults, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParsedData not implemented")
}
func (UnimplementedMainServiceServer) mustEmbedUnimplementedMainServiceServer() {}

// UnsafeMainServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MainServiceServer will
// result in compilation errors.
type UnsafeMainServiceServer interface {
	mustEmbedUnimplementedMainServiceServer()
}

func RegisterMainServiceServer(s grpc.ServiceRegistrar, srv MainServiceServer) {
	s.RegisterService(&MainService_ServiceDesc, srv)
}

func _MainService_GetParsedData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Conditions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MainServiceServer).GetParsedData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generated.MainService/GetParsedData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MainServiceServer).GetParsedData(ctx, req.(*Conditions))
	}
	return interceptor(ctx, in, info, handler)
}

// MainService_ServiceDesc is the grpc.ServiceDesc for MainService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MainService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "generated.MainService",
	HandlerType: (*MainServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetParsedData",
			Handler:    _MainService_GetParsedData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/proto.proto",
}

// ParserServiceClient is the client API for ParserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ParserServiceClient interface {
	GetParsedData(ctx context.Context, in *Conditions, opts ...grpc.CallOption) (*ParsedResults, error)
}

type parserServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewParserServiceClient(cc grpc.ClientConnInterface) ParserServiceClient {
	return &parserServiceClient{cc}
}

func (c *parserServiceClient) GetParsedData(ctx context.Context, in *Conditions, opts ...grpc.CallOption) (*ParsedResults, error) {
	out := new(ParsedResults)
	err := c.cc.Invoke(ctx, "/generated.ParserService/GetParsedData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ParserServiceServer is the server API for ParserService service.
// All implementations must embed UnimplementedParserServiceServer
// for forward compatibility
type ParserServiceServer interface {
	GetParsedData(context.Context, *Conditions) (*ParsedResults, error)
	mustEmbedUnimplementedParserServiceServer()
}

// UnimplementedParserServiceServer must be embedded to have forward compatible implementations.
type UnimplementedParserServiceServer struct {
}

func (UnimplementedParserServiceServer) GetParsedData(context.Context, *Conditions) (*ParsedResults, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParsedData not implemented")
}
func (UnimplementedParserServiceServer) mustEmbedUnimplementedParserServiceServer() {}

// UnsafeParserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ParserServiceServer will
// result in compilation errors.
type UnsafeParserServiceServer interface {
	mustEmbedUnimplementedParserServiceServer()
}

func RegisterParserServiceServer(s grpc.ServiceRegistrar, srv ParserServiceServer) {
	s.RegisterService(&ParserService_ServiceDesc, srv)
}

func _ParserService_GetParsedData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Conditions)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ParserServiceServer).GetParsedData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/generated.ParserService/GetParsedData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ParserServiceServer).GetParsedData(ctx, req.(*Conditions))
	}
	return interceptor(ctx, in, info, handler)
}

// ParserService_ServiceDesc is the grpc.ServiceDesc for ParserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ParserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "generated.ParserService",
	HandlerType: (*ParserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetParsedData",
			Handler:    _ParserService_GetParsedData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/proto.proto",
}
